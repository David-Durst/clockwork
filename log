Cmd: 
Rel order = { init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly', lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch' > loch and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfy' > lfy and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfx' > lfx and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx' = lfx, lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lich' > lich and 0 <= lich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y', x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and y' > y and 0 <= y' <= 15 and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and x' > x and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x' = x, ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and ich' > ich and 0 <= ich' <= 7 }
Getting validity deps...
Naive sched: { init_psum[root = 0, ly, lx, loch] -> [0, 0, 1, ly, 0, lx, 0, loch, 0, 0, 0, 0, 0, 0, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [0, 0, 1, ly, 0, lx, 0, loch, 1, lfy, 0, lfx, 0, lich, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; output[root = 0, ly, lx, loch] -> [0, 0, 1, ly, 0, lx, 0, loch, 2, 0, 0, 0, 0, 0, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] -> [0, 0, 0, y, 0, x, 0, ich, 0, 0, 0, 0, 0, 0, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
Getting iteration domain...
Got domain...
Got producer / consumer maps
Got validity deps...
Computing schedule for: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }
 subject to { init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx' = lx, loch' = loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; dma_if[root = 0, y, x, ich] -> mac[root' = 0, ly, lx, loch, lfy = y - ly, lfx = x - lx, lich = ich] : 0 <= ich <= 7 and ly >= -2 + y and 0 <= ly <= 13 and ly <= y and lx >= -2 + x and 0 <= lx <= 13 and lx <= x and 0 <= loch <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch' = loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly', lx', loch', lfy', lfx', lich'] : ly >= 0 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly < ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and lx >= 0 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx < lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and loch >= 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch < loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfy >= 0 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfy < lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and lfx >= 0 and 0 <= lich <= 7 and lfx < lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx' = lfx, lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and lich >= 0 and lich < lich' <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly', lx', loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx', loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y', x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and y' > y and 0 <= y' <= 15 and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and x' > x and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x' = x, ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and ich' > ich and 0 <= ich' <= 7 }

Result: { domain: "{ mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(ly)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(lx)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(loch)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(31)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfy)]; init_psum[root, ly, lx, loch] -> [(11 + ly)]; dma_if[root, y, x, ich] -> [(9 + y)]; output[root, ly, lx, loch] -> [(ly)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich]; init_psum[root, ly, lx, loch]; output[root, ly, lx, loch] }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfx)]; init_psum[root, ly, lx, loch] -> [(11 + lx)]; output[root, ly, lx, loch] -> [(lx)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(24 + lich)]; init_psum[root, ly, lx, loch] -> [(24 + loch)]; output[root, ly, lx, loch] -> [(loch)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "{ init_psum[root, ly, lx, loch] }" }, { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich] }" }, { filter: "{ output[root, ly, lx, loch] }" } ] } } } }, { filter: "{ dma_if[root, y, x, ich] }", child: { schedule: "[{ dma_if[root, y, x, ich] -> [(x)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ dma_if[root, y, x, ich] -> [(ich)] }]", permutable: 1, coincident: [ 1 ] } } } ] } } } } } }
Sched: { domain: "{ mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(ly)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(lx)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(loch)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(31)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfy)]; init_psum[root, ly, lx, loch] -> [(11 + ly)]; dma_if[root, y, x, ich] -> [(9 + y)]; output[root, ly, lx, loch] -> [(ly)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich]; init_psum[root, ly, lx, loch]; output[root, ly, lx, loch] }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfx)]; init_psum[root, ly, lx, loch] -> [(11 + lx)]; output[root, ly, lx, loch] -> [(lx)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(24 + lich)]; init_psum[root, ly, lx, loch] -> [(24 + loch)]; output[root, ly, lx, loch] -> [(loch)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "{ init_psum[root, ly, lx, loch] }" }, { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich] }" }, { filter: "{ output[root, ly, lx, loch] }" } ] } } } }, { filter: "{ dma_if[root, y, x, ich] }", child: { schedule: "[{ dma_if[root, y, x, ich] -> [(x)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ dma_if[root, y, x, ich] -> [(ich)] }]", permutable: 1, coincident: [ 1 ] } } } ] } } } } } }
Optimized schedule...
for (int c0 = 0; c0 <= 13; c0 += 1)
  for (int c1 = 0; c1 <= 13; c1 += 1)
    for (int c2 = 0; c2 <= 31; c2 += 1) {
      if (c2 >= 1 && c2 <= 30) {
        for (int c3 = 11; c3 <= 13; c3 += 1)
          for (int c5 = 11; c5 <= 13; c5 += 1)
            for (int c6 = 24; c6 <= 31; c6 += 1)
              mac(0, c0, c1, c2, c3 - 11, c5 - 11, c6 - 24);
      } else if (c1 <= 12 && c2 == 31) {
        for (int c3 = 11; c3 <= 13; c3 += 1)
          for (int c5 = 11; c5 <= 13; c5 += 1)
            for (int c6 = 24; c6 <= 31; c6 += 1)
              mac(0, c0, c1, 31, c3 - 11, c5 - 11, c6 - 24);
      } else if (c1 >= 1 && c2 == 0) {
        for (int c3 = 11; c3 <= 13; c3 += 1)
          for (int c5 = 11; c5 <= 13; c5 += 1)
            for (int c6 = 24; c6 <= 31; c6 += 1)
              mac(0, c0, c1, 0, c3 - 11, c5 - 11, c6 - 24);
      } else if (c0 <= 12 && c1 == 13 && c2 == 31) {
        for (int c3 = 11; c3 <= 13; c3 += 1)
          for (int c5 = 11; c5 <= 13; c5 += 1)
            for (int c6 = 24; c6 <= 31; c6 += 1)
              mac(0, c0, 13, 31, c3 - 11, c5 - 11, c6 - 24);
      } else if (c0 >= 1 && c1 == 0 && c2 == 0) {
        for (int c3 = 11; c3 <= 13; c3 += 1)
          for (int c5 = 11; c5 <= 13; c5 += 1)
            for (int c6 = 24; c6 <= 31; c6 += 1)
              mac(0, c0, 0, 0, c3 - 11, c5 - 11, c6 - 24);
      } else if (c0 == 13 && c1 == 13 && c2 == 31) {
        for (int c3 = 0; c3 <= 13; c3 += 1)
          for (int c5 = 0; c5 <= 13; c5 += 1)
            for (int c6 = 0; c6 <= 31; c6 += 1) {
              if (c3 >= 11 && c5 >= 11 && c6 >= 24)
                mac(0, 13, 13, 31, c3 - 11, c5 - 11, c6 - 24);
              output(0, c3, c5, c6);
            }
      } else {
        for (int c3 = 9; c3 <= 24; c3 += 1) {
          if (c3 >= 11)
            for (int c5 = 11; c5 <= 24; c5 += 1)
              for (int c6 = 24; c6 <= 55; c6 += 1) {
                init_psum(0, c3 - 11, c5 - 11, c6 - 24);
                if (c3 <= 13 && c5 <= 13 && c6 <= 31)
                  mac(0, 0, 0, 0, c3 - 11, c5 - 11, c6 - 24);
              }
          for (int c5 = 0; c5 <= 15; c5 += 1)
            for (int c6 = 0; c6 <= 7; c6 += 1)
              dma_if(0, c3 - 9, c5, c6);
        }
      }
    }
Rel order = { init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly', lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch' > loch and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfy' > lfy and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfx' > lfx and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx' = lfx, lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lich' > lich and 0 <= lich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y', x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and y' > y and 0 <= y' <= 15 and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and x' > x and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x' = x, ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and ich' > ich and 0 <= ich' <= 7 }
Getting validity deps...
Naive sched: { init_psum[root = 0, ly, lx, loch] -> [0, 0, 1, ly, 0, lx, 0, loch, 0, 0, 0, 0, 0, 0, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [0, 0, 1, ly, 0, lx, 0, loch, 1, lfy, 0, lfx, 0, lich, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; output[root = 0, ly, lx, loch] -> [0, 0, 1, ly, 0, lx, 0, loch, 2, 0, 0, 0, 0, 0, 0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] -> [0, 0, 0, y, 0, x, 0, ich, 0, 0, 0, 0, 0, 0, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
Getting iteration domain...
Got domain...
Got producer / consumer maps
Got validity deps...
Computing schedule for: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }
 subject to { init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> init_psum[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; output[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch' > loch and 0 <= loch' <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> output[root' = 0, ly' = ly, lx' = lx, loch' = loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; dma_if[root = 0, y, x, ich] -> mac[root' = 0, ly, lx, loch, lfy = y - ly, lfx = x - lx, lich = ich] : 0 <= ich <= 7 and ly >= -2 + y and 0 <= ly <= 13 and ly <= y and lx >= -2 + x and 0 <= lx <= 13 and lx <= x and 0 <= loch <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly', lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx', loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31; init_psum[root = 0, ly, lx, loch] -> output[root' = 0, ly' = ly, lx' = lx, loch' = loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly', lx', loch', lfy', lfx', lich'] : ly >= 0 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and ly < ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx', loch', lfy', lfx', lich'] : 0 <= ly <= 13 and lx >= 0 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lx < lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and loch >= 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 and loch < loch' <= 31 and 0 <= lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy', lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfy >= 0 and 0 <= lfx <= 2 and 0 <= lich <= 7 and lfy < lfy' <= 2 and 0 <= lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx', lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and lfx >= 0 and 0 <= lich <= 7 and lfx < lfx' <= 2 and 0 <= lich' <= 7; mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy' = lfy, lfx' = lfx, lich'] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and lich >= 0 and lich < lich' <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly', lx', loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and ly' > ly and 0 <= ly' <= 13 and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx', loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and lx' > lx and 0 <= lx' <= 13 and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx' = lx, loch', lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and loch' > loch and 0 <= loch' <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] -> mac[root' = 0, ly' = ly, lx' = lx, loch' = loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y', x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and y' > y and 0 <= y' <= 15 and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x', ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and x' > x and 0 <= x' <= 15 and 0 <= ich' <= 7; dma_if[root = 0, y, x, ich] -> dma_if[root' = 0, y' = y, x' = x, ich'] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 and ich' > ich and 0 <= ich' <= 7 }

Result: { domain: "{ mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(ly)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(lx)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(loch)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(31)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfy)]; init_psum[root, ly, lx, loch] -> [(11 + ly)]; dma_if[root, y, x, ich] -> [(9 + y)]; output[root, ly, lx, loch] -> [(ly)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich]; init_psum[root, ly, lx, loch]; output[root, ly, lx, loch] }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfx)]; init_psum[root, ly, lx, loch] -> [(11 + lx)]; output[root, ly, lx, loch] -> [(lx)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(24 + lich)]; init_psum[root, ly, lx, loch] -> [(24 + loch)]; output[root, ly, lx, loch] -> [(loch)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "{ init_psum[root, ly, lx, loch] }" }, { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich] }" }, { filter: "{ output[root, ly, lx, loch] }" } ] } } } }, { filter: "{ dma_if[root, y, x, ich] }", child: { schedule: "[{ dma_if[root, y, x, ich] -> [(x)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ dma_if[root, y, x, ich] -> [(ich)] }]", permutable: 1, coincident: [ 1 ] } } } ] } } } } } }
Sched: { domain: "{ mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7; init_psum[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31; dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7; output[root = 0, ly, lx, loch] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(ly)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(lx)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(13)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(loch)]; init_psum[root, ly, lx, loch] -> [(0)]; dma_if[root, y, x, ich] -> [(0)]; output[root, ly, lx, loch] -> [(31)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfy)]; init_psum[root, ly, lx, loch] -> [(11 + ly)]; dma_if[root, y, x, ich] -> [(9 + y)]; output[root, ly, lx, loch] -> [(ly)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich]; init_psum[root, ly, lx, loch]; output[root, ly, lx, loch] }", child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(11 + lfx)]; init_psum[root, ly, lx, loch] -> [(11 + lx)]; output[root, ly, lx, loch] -> [(lx)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ mac[root, ly, lx, loch, lfy, lfx, lich] -> [(24 + lich)]; init_psum[root, ly, lx, loch] -> [(24 + loch)]; output[root, ly, lx, loch] -> [(loch)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "{ init_psum[root, ly, lx, loch] }" }, { filter: "{ mac[root, ly, lx, loch, lfy, lfx, lich] }" }, { filter: "{ output[root, ly, lx, loch] }" } ] } } } }, { filter: "{ dma_if[root, y, x, ich] }", child: { schedule: "[{ dma_if[root, y, x, ich] -> [(x)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[{ dma_if[root, y, x, ich] -> [(ich)] }]", permutable: 1, coincident: [ 1 ] } } } ] } } } } } }
# of produced locations: 4
	Adding input port: ifbuf_dma_if_0
		Produced:: { dma_if[root = 0, y, x, ich] -> ifbuf[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for input port: ifbuf_dma_if_0in buf: ifbuf
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 0
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current in port name: 
	ifbuf_dma_if_0
	Adding input port: ifbuf_dma_if_1
		Produced:: { dma_if[root = 0, y, x, ich] -> ifbuf[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for input port: ifbuf_dma_if_1in buf: ifbuf
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 1
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 1
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current in port name: 
	ifbuf_dma_if_0	ifbuf_dma_if_1
	Adding input port: ifbuf_dma_if_2
		Produced:: { dma_if[root = 0, y, x, ich] -> ifbuf[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for input port: ifbuf_dma_if_2in buf: ifbuf
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 2
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 2
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current in port name: 
	ifbuf_dma_if_0	ifbuf_dma_if_1	ifbuf_dma_if_2
	Adding input port: ifbuf_dma_if_3
		Produced:: { dma_if[root = 0, y, x, ich] -> ifbuf[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for input port: ifbuf_dma_if_3in buf: ifbuf
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 3
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 3
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current in port name: 
	ifbuf_dma_if_0	ifbuf_dma_if_1	ifbuf_dma_if_2	ifbuf_dma_if_3
# of consumed locations: 4
Creating ports for op: ifmap
	Adding output port: ifmap_dma_if_4
		Consumed: { dma_if[root = 0, y, x, ich] -> ifmap[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for output port: ifmap_dma_if_4in buf: ifmap
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 0
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current out port name: 
	ifmap_dma_if_4
	Adding output port: ifmap_dma_if_5
		Consumed: { dma_if[root = 0, y, x, ich] -> ifmap[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for output port: ifmap_dma_if_5in buf: ifmap
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 1
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 1
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current out port name: 
	ifmap_dma_if_4	ifmap_dma_if_5
	Adding output port: ifmap_dma_if_6
		Consumed: { dma_if[root = 0, y, x, ich] -> ifmap[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for output port: ifmap_dma_if_6in buf: ifmap
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 2
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 2
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current out port name: 
	ifmap_dma_if_4	ifmap_dma_if_5	ifmap_dma_if_6
	Adding output port: ifmap_dma_if_7
		Consumed: { dma_if[root = 0, y, x, ich] -> ifmap[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
	Adding access pattern for output port: ifmap_dma_if_7in buf: ifmap
	op name :dma_if
Domain space on <y> is: [0, 15]
Domain space on <x> is: [0, 15]
Domain space on <ich> is: [0, 7]
ADDR dim <0> range: 8, offset: 3
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 3
	var_name: ich, idx: 3, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: x, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: y, idx: 1, coef: 1
current out port name: 
	ifmap_dma_if_4	ifmap_dma_if_5	ifmap_dma_if_6	ifmap_dma_if_7
# of produced locations: 1
	Adding input port: psum_init_psum_8
		Produced:: { init_psum[root = 0, ly, lx, loch] -> psum[0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }
	Adding access pattern for input port: psum_init_psum_8in buf: psum
	op name :init_psum
ADDR dim <0> range: 1, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
current in port name: 
	psum_init_psum_8
# of consumed locations: 0
# of produced locations: 1
	Adding input port: psum_mac_9
		Produced:: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> psum[0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for input port: psum_mac_9in buf: psum
	op name :mac
ADDR dim <0> range: 1, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
current in port name: 
	psum_init_psum_8	psum_mac_9
# of consumed locations: 5
	Adding output port: ifbuf_mac_10
		Consumed: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for output port: ifbuf_mac_10in buf: ifbuf
	op name :mac
Domain space on <ly> is: [0, 13]
Domain space on <lx> is: [0, 13]
Domain space on <lfy> is: [0, 2]
Domain space on <lfx> is: [0, 2]
Domain space on <lich> is: [0, 7]
ADDR dim <0> range: 8, offset: 0
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
	var_name: lich, idx: 5, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: lfx, idx: 4, coef: 1
	var_name: lx, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: lfy, idx: 3, coef: 1
	var_name: ly, idx: 1, coef: 1
current out port name: 
	ifbuf_mac_10
	Adding output port: ifbuf_mac_11
		Consumed: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[1 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for output port: ifbuf_mac_11in buf: ifbuf
	op name :mac
Domain space on <ly> is: [0, 13]
Domain space on <lx> is: [0, 13]
Domain space on <lfy> is: [0, 2]
Domain space on <lfx> is: [0, 2]
Domain space on <lich> is: [0, 7]
ADDR dim <0> range: 8, offset: 1
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 1
	var_name: lich, idx: 5, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: lfx, idx: 4, coef: 1
	var_name: lx, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: lfy, idx: 3, coef: 1
	var_name: ly, idx: 1, coef: 1
current out port name: 
	ifbuf_mac_10	ifbuf_mac_11
	Adding output port: ifbuf_mac_12
		Consumed: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[2 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for output port: ifbuf_mac_12in buf: ifbuf
	op name :mac
Domain space on <ly> is: [0, 13]
Domain space on <lx> is: [0, 13]
Domain space on <lfy> is: [0, 2]
Domain space on <lfx> is: [0, 2]
Domain space on <lich> is: [0, 7]
ADDR dim <0> range: 8, offset: 2
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 2
	var_name: lich, idx: 5, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: lfx, idx: 4, coef: 1
	var_name: lx, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: lfy, idx: 3, coef: 1
	var_name: ly, idx: 1, coef: 1
current out port name: 
	ifbuf_mac_10	ifbuf_mac_11	ifbuf_mac_12
	Adding output port: ifbuf_mac_13
		Consumed: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[3 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for output port: ifbuf_mac_13in buf: ifbuf
	op name :mac
Domain space on <ly> is: [0, 13]
Domain space on <lx> is: [0, 13]
Domain space on <lfy> is: [0, 2]
Domain space on <lfx> is: [0, 2]
Domain space on <lich> is: [0, 7]
ADDR dim <0> range: 8, offset: 3
ADDR dim <1> range: 16, offset: 0
ADDR dim <2> range: 16, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 3
	var_name: lich, idx: 5, coef: 4
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: lfx, idx: 4, coef: 1
	var_name: lx, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: lfy, idx: 3, coef: 1
	var_name: ly, idx: 1, coef: 1
current out port name: 
	ifbuf_mac_10	ifbuf_mac_11	ifbuf_mac_12	ifbuf_mac_13
	Adding output port: psum_mac_14
		Consumed: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> psum[0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
	Adding access pattern for output port: psum_mac_14in buf: psum
	op name :mac
ADDR dim <0> range: 1, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
current out port name: 
	psum_mac_14
# of produced locations: 1
	Adding input port: ofmap_output_15
		Produced:: { output[root = 0, ly, lx, loch] -> ofmap[loch, lx, ly] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }
	Adding access pattern for input port: ofmap_output_15in buf: ofmap
	op name :output
Domain space on <ly> is: [0, 13]
Domain space on <lx> is: [0, 13]
Domain space on <loch> is: [0, 31]
ADDR dim <0> range: 32, offset: 0
ADDR dim <1> range: 14, offset: 0
ADDR dim <2> range: 14, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
	var_name: loch, idx: 3, coef: 1
output_dim: 1
	var_name: const, idx: 0, coef: 0
	var_name: lx, idx: 2, coef: 1
output_dim: 2
	var_name: const, idx: 0, coef: 0
	var_name: ly, idx: 1, coef: 1
current in port name: 
	ofmap_output_15
# of consumed locations: 1
	Adding output port: psum_output_16
		Consumed: { output[root = 0, ly, lx, loch] -> psum[0] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 }
	Adding access pattern for output port: psum_output_16in buf: psum
	op name :output
ADDR dim <0> range: 1, offset: 0
output_dim: 0
	var_name: const, idx: 0, coef: 0
current out port name: 
	psum_mac_14	psum_output_16
ub: 2047, lb: 1
inpt  = ifbuf_dma_if_0
outpt = ifbuf_mac_10
name of bank = ifbuf_dma_if_0_to_ifbuf_mac_10
extracting box from { ifbuf[i0, i1, i2] : (i0) mod 4 = 0 and 0 <= i0 <= 28 and 0 <= i1 <= 15 and 0 <= i2 <= 15 }
  result = {[0, 28], [0, 15], [0, 15]}
ub: 2047, lb: 1
inpt  = ifbuf_dma_if_1
outpt = ifbuf_mac_11
name of bank = ifbuf_dma_if_1_to_ifbuf_mac_11
extracting box from { ifbuf[i0, i1, i2] : (-1 + i0) mod 4 = 0 and 0 < i0 <= 29 and 0 <= i1 <= 15 and 0 <= i2 <= 15 }
  result = {[1, 29], [0, 15], [0, 15]}
ub: 2047, lb: 1
inpt  = ifbuf_dma_if_2
outpt = ifbuf_mac_12
name of bank = ifbuf_dma_if_2_to_ifbuf_mac_12
extracting box from { ifbuf[i0, i1, i2] : (2 + i0) mod 4 = 0 and 2 <= i0 <= 30 and 0 <= i1 <= 15 and 0 <= i2 <= 15 }
  result = {[2, 30], [0, 15], [0, 15]}
ub: 2047, lb: 1
inpt  = ifbuf_dma_if_3
outpt = ifbuf_mac_13
name of bank = ifbuf_dma_if_3_to_ifbuf_mac_13
extracting box from { ifbuf[i0, i1, i2] : (1 + i0) mod 4 = 0 and 3 <= i0 <= 31 and 0 <= i1 <= 15 and 0 <= i2 <= 15 }
  result = {[3, 31], [0, 15], [0, 15]}
Receiver banks for ifbuf_dma_if_0
  ifbuf_dma_if_0_to_ifbuf_mac_10, # read offsets: 2048
Receiver banks for ifbuf_dma_if_1
  ifbuf_dma_if_1_to_ifbuf_mac_11, # read offsets: 2048
Receiver banks for ifbuf_dma_if_2
  ifbuf_dma_if_2_to_ifbuf_mac_12, # read offsets: 2048
Receiver banks for ifbuf_dma_if_3
  ifbuf_dma_if_3_to_ifbuf_mac_13, # read offsets: 2048
creating select for port: <ifbuf_mac_10> in buffer: ifbuf
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
1 possible ports for ifbuf_mac_10 on buffer: 
--- ifbuf
	---- In ports
		ifbuf_dma_if_0
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_dma_if_1
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_dma_if_2
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_dma_if_3
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Out ports
		ifbuf_mac_10
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_mac_11
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[1 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_mac_12
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[2 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_mac_13
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[3 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Output Bundles
		mac_read
		---- Ports...
			ifbuf_mac_10
			ifbuf_mac_11
			ifbuf_mac_12
			ifbuf_mac_13

  ifbuf_dma_if_0
Out domain: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
Pieces of { mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2047 - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((2040 - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and lich = 7 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((255 - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and loch = 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (248 - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and loch = 0 and lich = 7 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2047 - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2040 - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lich = 7 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1927 - 128 * lfy) - lich) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (1920 - 128 * lfy) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 <= loch <= 31 and 0 <= lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((((2047 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2040 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and lich = 7 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((1927 - 128 * ly) - 128 * lfy) - lich) : root = 0 and lx = 13 and lfx = 2 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1920 - 128 * ly) - 128 * lfy) : root = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((127 - 8 * lx) - 8 * lfx) - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((120 - 8 * lx) - 8 * lfx) : root = 0 and ly = 13 and lfy = 2 and lich = 7 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (7 - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfx >= 0 and 15 - lx <= lfx <= 2 and 0 <= lich <= 6 }
Generating debug assertion
Finished debug assertion
creating select for port: <ifbuf_mac_11> in buffer: ifbuf
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
1 possible ports for ifbuf_mac_11 on buffer: 
--- ifbuf
	---- In ports
		ifbuf_dma_if_0
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_dma_if_1
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_dma_if_2
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_dma_if_3
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Out ports
		ifbuf_mac_10
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_mac_11
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[1 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_mac_12
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[2 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_mac_13
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[3 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Output Bundles
		mac_read
		---- Ports...
			ifbuf_mac_10
			ifbuf_mac_11
			ifbuf_mac_12
			ifbuf_mac_13

  ifbuf_dma_if_1
Out domain: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
Pieces of { mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2047 - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((2040 - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and lich = 7 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((255 - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and loch = 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (248 - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and loch = 0 and lich = 7 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2047 - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2040 - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lich = 7 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1927 - 128 * lfy) - lich) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (1920 - 128 * lfy) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 <= loch <= 31 and 0 <= lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((((2047 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2040 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and lich = 7 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((1927 - 128 * ly) - 128 * lfy) - lich) : root = 0 and lx = 13 and lfx = 2 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1920 - 128 * ly) - 128 * lfy) : root = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((127 - 8 * lx) - 8 * lfx) - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((120 - 8 * lx) - 8 * lfx) : root = 0 and ly = 13 and lfy = 2 and lich = 7 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (7 - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfx >= 0 and 15 - lx <= lfx <= 2 and 0 <= lich <= 6 }
Generating debug assertion
Finished debug assertion
creating select for port: <ifbuf_mac_12> in buffer: ifbuf
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
1 possible ports for ifbuf_mac_12 on buffer: 
--- ifbuf
	---- In ports
		ifbuf_dma_if_0
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_dma_if_1
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_dma_if_2
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_dma_if_3
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Out ports
		ifbuf_mac_10
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_mac_11
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[1 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_mac_12
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[2 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_mac_13
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[3 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Output Bundles
		mac_read
		---- Ports...
			ifbuf_mac_10
			ifbuf_mac_11
			ifbuf_mac_12
			ifbuf_mac_13

  ifbuf_dma_if_2
Out domain: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
Pieces of { mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2047 - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((2040 - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and lich = 7 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((255 - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and loch = 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (248 - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and loch = 0 and lich = 7 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2047 - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2040 - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lich = 7 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1927 - 128 * lfy) - lich) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (1920 - 128 * lfy) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 <= loch <= 31 and 0 <= lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((((2047 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2040 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and lich = 7 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((1927 - 128 * ly) - 128 * lfy) - lich) : root = 0 and lx = 13 and lfx = 2 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1920 - 128 * ly) - 128 * lfy) : root = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((127 - 8 * lx) - 8 * lfx) - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((120 - 8 * lx) - 8 * lfx) : root = 0 and ly = 13 and lfy = 2 and lich = 7 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (7 - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfx >= 0 and 15 - lx <= lfx <= 2 and 0 <= lich <= 6 }
Generating debug assertion
Finished debug assertion
creating select for port: <ifbuf_mac_13> in buffer: ifbuf
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
1 possible ports for ifbuf_mac_13 on buffer: 
--- ifbuf
	---- In ports
		ifbuf_dma_if_0
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_dma_if_1
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_dma_if_2
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_dma_if_3
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifbuf[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			buffer capacity: 2047
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Out ports
		ifbuf_mac_10
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[0, 0, 0] }
			max location: { ifbuf[28, 15, 15] }
		ifbuf_mac_11
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[1 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[1, 0, 0] }
			max location: { ifbuf[29, 15, 15] }
		ifbuf_mac_12
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[2 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[2, 0, 0] }
			max location: { ifbuf[30, 15, 15] }
		ifbuf_mac_13
			dom : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			acc : { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> ifbuf[3 + 4lich, lx + lfx, ly + lfy] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			sched: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] -> [ly, lx, loch, 11 + lfy, 0, 11 + lfx, 24 + lich, 1] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
			min location: { ifbuf[3, 0, 0] }
			max location: { ifbuf[31, 15, 15] }
	---- Output Bundles
		mac_read
		---- Ports...
			ifbuf_mac_10
			ifbuf_mac_11
			ifbuf_mac_12
			ifbuf_mac_13

  ifbuf_dma_if_3
Out domain: { mac[root = 0, ly, lx, loch, lfy, lfx, lich] : 0 <= ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 7 }
Pieces of { mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2047 - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((2040 - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and lich = 7 and 0 < loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((255 - 8 * lfx) - lich) : root = 0 and ly = 0 and lx = 0 and loch = 0 and 0 <= lfy <= 2 and 0 <= lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (248 - 8 * lfx) : root = 0 and ly = 0 and lx = 0 and loch = 0 and lich = 7 and 0 <= lfy <= 2 and 0 <= lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2047 - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and ly = 0 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((2040 - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and ly = 0 and lich = 7 and 0 < lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1927 - 128 * lfy) - lich) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and 0 <= loch <= 31 and 0 <= lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> (1920 - 128 * lfy) : root = 0 and ly = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 <= loch <= 31 and 0 <= lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((((2047 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) - lich) : root = 0 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((((2040 - 128 * ly) - 8 * lx) - 128 * lfy) - 8 * lfx) : root = 0 and lich = 7 and 0 < ly <= 13 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((1927 - 128 * ly) - 128 * lfy) - lich) : root = 0 and lx = 13 and lfx = 2 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((1920 - 128 * ly) - 128 * lfy) : root = 0 and lx = 13 and lfx = 2 and lich = 7 and 0 < ly <= 13 and 0 <= loch <= 31 and 0 <= lfy <= 14 - ly and lfy <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (((127 - 8 * lx) - 8 * lfx) - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2 and 0 <= lich <= 6; mac[root, ly, lx, loch, lfy, lfx, lich] -> ((120 - 8 * lx) - 8 * lfx) : root = 0 and ly = 13 and lfy = 2 and lich = 7 and 0 <= lx <= 13 and 0 <= loch <= 31 and 0 <= lfx <= 14 - lx and lfx <= 2; mac[root, ly, lx, loch, lfy, lfx, lich] -> (7 - lich) : root = 0 and ly = 13 and lfy = 2 and 0 <= lx <= 13 and 0 <= loch <= 31 and lfx >= 0 and 15 - lx <= lfx <= 2 and 0 <= lich <= 6 }
Generating debug assertion
Finished debug assertion
	Finished generate slection
	 generate for bundle: dma_if_write
	 generate for bundle: mac_read
creating select for port: <ifmap_dma_if_4> in buffer: ifmap
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
0 possible ports for ifmap_dma_if_4 on buffer: 
--- ifmap
	---- In ports
	---- Out ports
		ifmap_dma_if_4
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[0, 0, 0] }
			max location: { ifmap[28, 15, 15] }
		ifmap_dma_if_5
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[1, 0, 0] }
			max location: { ifmap[29, 15, 15] }
		ifmap_dma_if_6
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[2, 0, 0] }
			max location: { ifmap[30, 15, 15] }
		ifmap_dma_if_7
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[3, 0, 0] }
			max location: { ifmap[31, 15, 15] }
	---- Output Bundles
		dma_if_read
		---- Ports...
			ifmap_dma_if_4
			ifmap_dma_if_5
			ifmap_dma_if_6
			ifmap_dma_if_7

Generating debug assertion
Finished debug assertion
creating select for port: <ifmap_dma_if_5> in buffer: ifmap
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
0 possible ports for ifmap_dma_if_5 on buffer: 
--- ifmap
	---- In ports
	---- Out ports
		ifmap_dma_if_4
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[0, 0, 0] }
			max location: { ifmap[28, 15, 15] }
		ifmap_dma_if_5
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[1, 0, 0] }
			max location: { ifmap[29, 15, 15] }
		ifmap_dma_if_6
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[2, 0, 0] }
			max location: { ifmap[30, 15, 15] }
		ifmap_dma_if_7
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[3, 0, 0] }
			max location: { ifmap[31, 15, 15] }
	---- Output Bundles
		dma_if_read
		---- Ports...
			ifmap_dma_if_4
			ifmap_dma_if_5
			ifmap_dma_if_6
			ifmap_dma_if_7

Generating debug assertion
Finished debug assertion
creating select for port: <ifmap_dma_if_6> in buffer: ifmap
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
0 possible ports for ifmap_dma_if_6 on buffer: 
--- ifmap
	---- In ports
	---- Out ports
		ifmap_dma_if_4
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[0, 0, 0] }
			max location: { ifmap[28, 15, 15] }
		ifmap_dma_if_5
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[1, 0, 0] }
			max location: { ifmap[29, 15, 15] }
		ifmap_dma_if_6
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[2, 0, 0] }
			max location: { ifmap[30, 15, 15] }
		ifmap_dma_if_7
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[3, 0, 0] }
			max location: { ifmap[31, 15, 15] }
	---- Output Bundles
		dma_if_read
		---- Ports...
			ifmap_dma_if_4
			ifmap_dma_if_5
			ifmap_dma_if_6
			ifmap_dma_if_7

Generating debug assertion
Finished debug assertion
creating select for port: <ifmap_dma_if_7> in buffer: ifmap
Created dim decls
finished creating decl
finished get lex max event
Codegen finished
0 possible ports for ifmap_dma_if_7 on buffer: 
--- ifmap
	---- In ports
	---- Out ports
		ifmap_dma_if_4
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[0, 0, 0] }
			max location: { ifmap[28, 15, 15] }
		ifmap_dma_if_5
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[1 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[1, 0, 0] }
			max location: { ifmap[29, 15, 15] }
		ifmap_dma_if_6
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[2 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[2, 0, 0] }
			max location: { ifmap[30, 15, 15] }
		ifmap_dma_if_7
			dom : { dma_if[root = 0, y, x, ich] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			acc : { dma_if[root = 0, y, x, ich] -> ifmap[3 + 4ich, x, y] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			sched: { dma_if[root = 0, y, x, ich] -> [0, 0, 0, 9 + y, 1, x, ich, 0] : 0 <= y <= 15 and 0 <= x <= 15 and 0 <= ich <= 7 }
			min location: { ifmap[3, 0, 0] }
			max location: { ifmap[31, 15, 15] }
	---- Output Bundles
		dma_if_read
		---- Ports...
			ifmap_dma_if_4
			ifmap_dma_if_5
			ifmap_dma_if_6
			ifmap_dma_if_7

Generating debug assertion
Finished debug assertion
	Finished generate slection
	 generate for bundle: dma_if_read
